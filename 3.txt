1. advanced: image denoising using ROF (Rudin-Osher-Fatemi denoising model)
	# ROF denoising preserves edges and image structures while blurring out the noise

	def denoise(im, U_init, tolerance=0.1, tau=0.125, tv_weight=100):		# to use this, denoise(im, im), do not understand..
	    """ An implementation of the Rudin-Osher-Fatemi (ROF) denoising model
	    using the numerical procedure presented in eq (11) A. Chambolle (2005).

	    Input: noisy input image (grayscale), initial guess for U, weight of
	    the TV-regularizing term, steplength, tolerance for stop criterion.

	    Output: denoised and detextured image, texture residual. """

	    m,n = im.shape      # size of noisy image

	    # initialize
	    U = U_init
	    Px = im             # x-component to the dual field
	    Py = im             # y-component of the dual field
	    error = 1

	    while error > tolerance:
		Uold = U

		# gradient of primal variable
		GradUx = roll(U, -1, axis=1)-U      # x-component of U's gradient
		GradUy = roll(U, -1, axis=0)-U      # y-component of U's gradient
	    
		# update the dual varible
		PxNew = Px + (tau/tv_weight)*GradUx
		PyNew = Py + (tau/tv_weight)*GradUy
		NormNew = maximum(1,sqrt(PxNew**2+PyNew**2))
	    
		Px = PxNew/NormNew                  # update of x-component (dual)
		Py = PyNew/NormNew                  # update of y-component (dual)
	    
		# update the primal variable
		RxPx = roll(Px,1,axis=1)            # right x-translation of x-component
		RyPy = roll(Py,1,axis=0)            # right y-translation of y-component
	    
		DivP = (Px-RxPx)+(Py-RyPy)          # divergence of the dual field.
		U = im + tv_weight*DivP             # update of the primal variable
	    
		# update of error
		error = linalg.norm(U-Uold)/sqrt(n*m);

	    return U,im-U                           # denoised image and texture residual

2. local image descriptors
	to find corresponding points and regions between images
	important in creating panoramas, augmented reality, computing 3D reconstructions, etc

3. Harris Corner Detector
	the general idea is to locate interest points where the surrounding neighborhood shows edges in more than one direction

4. SIFT (scale-invariant feature transform)
