1. https://github.com/jbhuang0604/awesome-computer-vision
	tons of resources!
http://www.visiondummy.com/
	basic concepts

2. http://www.lfd.uci.edu/~gohlke/pythonlibs
	a website with python packages
	when pip doesn't work, download wheel files here and then 
		pip install xxxx.whl

3. NumPy fundamentals
	ndarray, n-dimensional array, has some important attributes (use [[1,2], [3,4]] as example)
		ndarray.ndim	2
			number of dimensions, also known as rank
		ndarray.shape	(2, 2)
		ndarray.size	4
		ndarray.dtype
			besides standard Python types, NumPy provides its own types, such as numpy.int16, numpy.float64, etc

	array creation
		numpy.array()
			create an array from a Python list or tuple
				the type is deduced from the original sequence
			array([2, 3, 4])
				array(2,3,4)	# Wrong!
			array([[1,2], [3,4]], dtype=numpy.uint8)
		ways to create arrays with initial placeholder content
			zeros((3,4))		# the default data type is float64
			ones((3,4), dtype=int16)
			empty((3,4))		# the initial content is random
		ranges
			numpy.arange(10, 20, 5)		# equals to array([10, 15, 20])
				# range() returns a list, arange() returns an array
				# floating points arguments can be used, but due to the lack of precision, it's better to use linspace
			numpy.linspace(0, 2*pi, 100)	# 100 numbers from 0 to 2*pi

	basic operations
		arithmetic operations
			apply elementwise
				and a new array is created with the result
			A*B is elementwise product
				A.dot(B) is matrix product
		some unary operations
			a = numpy.random.random((2, 3))	# returns 6 random numbers
			a = numpy.floor(10 * a)		# gets random integers from 0-10 
			a.sum()
			a.max()
			a.min(axis=0)		# min of each row, returns a 1d array
			a.cumsum(axis=1)	# cumulative sum along each row
						# the result's shape is the same as a's, no matter what axis is
			# many others, such as mean()
		universal functions
			also apply elementwise
				and returns an array as output
			numpy.exp(A)
			numpy.sqrt(A)

	indexing slicing and iterating
		# a = array([1,2,3,4,5])
		a1 = a[::2]		# the third one is step! slicing of Python's list doesn't support this
		a2 = a[::-1]		# reverse
		# x is a rank 5 array
		x[...,3] means x[:,:,:,:,3]

	shape manipulation
		changing the shape of an array
			a1 = a.flatten()
			a2 = a.reshape((3,2))
			a3 = a.T		# transpose
			a4 = a.reshape((3,-1))	# the -1 will be automatically calculated
			a.resize((2,3))		# operate on the original array
		stacking together different arrays
			vstack((a,b))
			hstack((a,b))
			concatenate((a,b), 0)	# allows to specity the axis
		splitting an array
			hsplit(a, 3)		# equally splits into 3 arrays
			hsplit(a, (3,5))	# split after the third and fifth column
			# vsplit()
			# array_split() allows to specify which axis to split
	
	copies and views
		no copy
			b = a		# no new object is created, a and b are two names for the same object
			b.shape = 3,4	# also changes the shape of a
			Python passes mutable objects as reference, so function calls make no copy
		view or shallow copy
			c = a.view()	# creates a new array object looks at the same data
			c.shape = 2,6	# does not change the shape of a
			c[0,4] = 100	# DOES change a's data
			! slicing an array returns a view of it
		deep copy
			d = a.copy()	# a totally new array

	fancy indexing and index
		i = array([1,1,3,4])
		a[i]	# equals to array([a[1], a[1], a[3], a[4]])

		
